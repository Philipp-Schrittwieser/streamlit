import streamlit as st
import time
import pandas as pd
from apps.teacher.llms.gemini.generate_1_text_gemini import generate_1_text_gemini
from apps.teacher.llms.gemini.generate_2_qas_gemini import generate_2_qas_gemini
from apps.teacher.reset_apps import reset_apps
from apps.teacher.create_documents.create_word import create_document_for_genius_ai, create_combined__exercise_document, format_questions_and_answers
from apps.teacher.pages.kahoot.example_text import example_text

# st.subheader("1Ô∏è‚É£. Lesetext mit KI generieren")
# st.subheader("2Ô∏è‚É£. Fragen mit KI generieren (Sch√ºler)")
# st.subheader("3Ô∏è‚É£. Antworten mit KI generieren (Lehrer)")

def show_generate_popup(type):
  st.success(f"Generiere {type}... ‚õèÔ∏è")
  st.toast(f"KI generiert {type}... üí°")
  time.sleep(1)
  st.toast("Bitte warte einen kurzen Moment ‚è∞ ")

def show_finish_popup():
  st.balloons()
  time.sleep(0.75)
  st.rerun()

def show_download_popup(type):
  st.toast(f"{type} wurde heruntergeladen ‚úÖ ")
  time.sleep(1)
  st.toast("Du kannst es dir rechts oben im Browser ansehen! üåé")

def show_restart_popup():
  st.toast("App wird neu gestartet... üèÅ")
  time.sleep(0.5)


## Setzt bei Wechsel alles zur√ºck
if st.session_state.current_page != "apps/teacher/pages/exercise_sheet/exercise_sheet.py":    
  reset_apps()
  st.session_state.current_page = "apps/teacher/pages/exercise_sheet/exercise_sheet.py"


if "exercise_sheet_level" not in st.session_state:
  st.session_state.exercise_sheet_level = "1_text"

if "response" not in st.session_state:
  st.session_state.response = ""

if "current_page" not in st.session_state:
  st.session_state.current_page = "apps/teacher/pages/exercise_sheet/exercise_sheet.py"

left, right = st.columns([15, 1], gap="small", vertical_alignment="center")
left.title("Arbeitsblatt Generator üìù", anchor=False)

# st.write("Diese Seite ist gerade im Umbau üöß")

if st.session_state.exercise_sheet_level == "2_qas":
  if right.button(":material/arrow_back:", use_container_width=False):
    show_restart_popup()
    reset_apps()
    st.rerun()

st.text("")

if st.session_state.exercise_sheet_level == "1_text":
  one, two, three = st.columns(3)
  one.markdown("<h4>1Ô∏è‚É£. <u>Lesetext</u> üìñ", unsafe_allow_html=True)
  two.markdown("<h4>2Ô∏è‚É£. Aufgaben", unsafe_allow_html=True)
  three.markdown("<h4>3Ô∏è‚É£. Download", unsafe_allow_html=True)

if st.session_state.exercise_sheet_level == "2_qas":
  one, two, three = st.columns(3)
  one.markdown("<h4>1Ô∏è‚É£. Lesetext", unsafe_allow_html=True)
  two.markdown("<h4>2Ô∏è‚É£. <u>Aufgaben</u> ‚ÅâÔ∏è", unsafe_allow_html=True)
  three.markdown("<h4>3Ô∏è‚É£. Download", unsafe_allow_html=True)

if st.session_state.exercise_sheet_level == "3_answers":
  one, two, three = st.columns(3)
  one.markdown("<h4>1Ô∏è‚É£. Lesetext", unsafe_allow_html=True)
  two.markdown("<h4>2Ô∏è‚É£. Aufgaben", unsafe_allow_html=True)
  three.markdown("<h4>3Ô∏è‚É£. <u>Download</u> üíæ ", unsafe_allow_html=True)

st.text("")

if st.session_state.exercise_sheet_level == "1_text":
  st.subheader("1. Lesetext einf√ºgen oder generieren...", divider="blue", anchor=False)
  st.write("M√∂chtest du einen Text einf√ºgen, aus dem dein Arbeitsblatt erstellt wird (M√∂glichkeit A) oder soll ein komplett neuer Text f√ºr dich generiert werden (M√∂glichkeit B)?")
  st.write("Tippe dein Thema unterhalb ein und dann w√§hle Option A oder B.")

  st.text("")

  topic = st.text_input("Thema eintippen:", placeholder="z.B. Klimawandel")
  st.session_state.topic = topic

  st.text("")

  left, mid, right = st.columns([6,1,6], gap="small")

  with left:
    st.subheader("A: Text einf√ºgen", divider="violet", anchor=False)
    topic_text = st.text_area("Text hier einf√ºgen:", placeholder=example_text, height=95, max_chars=60000)
    st.write("")
    st.session_state.response = topic_text

    if st.button(label="Fortfahren :material/arrow_right_alt:", key="button-blue", use_container_width=True):
      
      if st.session_state.topic == "":
        st.toast("Thema fehlt :exclamation:")
        st.error("Bitte Thema eingeben :exclamation:")
        time.sleep(0.5)
      
      if st.session_state.response == "":
        st.toast("Text fehlt :exclamation:")
        st.error("Bitte Text einf√ºgen :exclamation:")

      if st.session_state.topic != "" and st.session_state.response != "":
        st.session_state.response = topic_text
        st.session_state.exercise_sheet_level = "2_qas"
        st.rerun()

    with right:
      st.subheader("B: Text generieren", divider="green", anchor=False)
      st.write("Text generieren lassen:")

      with st.expander("Erweiterte Einstellungen"):
        #dropdown f√ºr KI-Modelle
        st.session_state.ai_model = st.selectbox("KI-Modell", ["Genius AI", "Genius AI Pro"])

      if st.button(label="Lesetext generieren :material/laps:", key="button-blue2", use_container_width=True):
        
        if st.session_state.topic == "":
          st.toast("Thema fehlt :exclamation:")
          st.error("Bitte Thema eingeben :exclamation:")

        else:
          show_generate_popup("Lesetext")

          with st.spinner(''):
            selected_ai_model = st.session_state.ai_model

            if selected_ai_model == "Max Creator":
              # response = generate_1_text_gpt(topic)
              pass
            elif selected_ai_model == "Genius AI":
              response = generate_1_text_gemini(model_name="gemini-1.5-flash", topic=topic)

            elif selected_ai_model == "Genius AI Pro":
              response = generate_1_text_gemini(model_name="gemini-1.5-pro", topic=topic)
              
              if response == "error": 
                print("Trying again with flash model")
                response = generate_1_text_gemini(model_name="gemini-1.5-flash", topic=topic)

            else:
              st.error("Kein g√ºltiges KI-Modell ausgew√§hlt :exclamation:")
              
            if response != "error":
              st.session_state.response = response
              st.session_state.exercise_sheet_level = "2_qas"
              show_finish_popup()

            else:
              st.error("Fehler beim Generieren. :exclamation: Bitte versuche es erneut - eventuell mit einem anderen Thema...")
              st.button("Ok")

elif st.session_state.exercise_sheet_level == "2_qas":
  st.subheader("2. Aufgaben und L√∂sungen erstellen...", divider="violet", anchor=False)

  st.write("Dein Lesetext ist im Dropdown-Men√º verf√ºgbar. Klicke jetzt auf den Button darunter, um Aufgaben und L√∂sungen zu deinem Text zu erstellen.")

  number_questions = st.selectbox("Anzahl zu generierender Fragen", [3, 5, 7, 10, 12, 15, 20, 25, 30, 40], index=3)

  with st.expander("Lesetext hier ansehen"):
    st.write(st.session_state.response)

  left, right = st.columns(2, gap="large")

  with left:
    if st.button(label="Aufgaben generieren :material/laps:", key="button-blue", use_container_width=True):
      show_generate_popup("Aufgaben und L√∂sungen")

      with st.spinner(''):
        selected_ai_model = st.session_state.ai_model

        if selected_ai_model == "Max Creator":
          # qas = generate_2_qas_gpt(st.session_state.response)
          pass
        elif selected_ai_model == "Genius AI":
          qas = generate_2_qas_gemini(model_name="gemini-1.5-flash", input_text=st.session_state.response, number_questions=number_questions)

        elif selected_ai_model == "Genius AI Pro":
          qas = generate_2_qas_gemini(model_name="gemini-1.5-pro", input_text=st.session_state.response, number_questions=number_questions)

          if qas == "error":
            print("Trying again with flash model")
            qas = generate_2_qas_gemini(model_name="gemini-1.5-flash", input_text=st.session_state.response, number_questions=number_questions)

        else:
          st.error("Kein g√ºltiges KI-Modell ausgew√§hlt :exclamation:")
        
        if qas != "error":
          st.session_state.qas = qas
          st.session_state.exercise_sheet_level = "3_answers"
          show_finish_popup()

        else:
          st.error("Fehler beim Generieren. :exclamation: Bitte versuche es erneut...")
          st.button("Ok")

elif st.session_state.exercise_sheet_level == "3_answers":
  st.subheader("3. Alle Unterlagen herunterladen...", divider="green", anchor=False)

  st.write('Hier kannst du noch einmal alle Dokumente einsehen und wenn du zufrieden bist einfach herunterladen. Wenn du noch ein Arbeitsblatt generieren m√∂chtest, klicke einfach auf "Neu starten".')

  with st.expander("Generierter Lesetext"):
    st.write(st.session_state.response)
  
  with st.expander("Generierte Aufgaben"):
 
    for i, qa in enumerate(st.session_state.qas, 1):
      st.markdown(f"### **{i}. {qa['question']}**")
      st.markdown(f"{qa['answer']}")

    lines = "\n\n\u200B\n\n_________________________________________________________________________________________________________\n\n\u200B\n\n_________________________________________________________________________________________________________\n\n\u200B\n\n"
    fragen, l√∂sungen = format_questions_and_answers(st.session_state.topic, st.session_state.qas, lines)
    
    st.session_state.fragen = fragen
    st.session_state.l√∂sungen = l√∂sungen



  lesetext_filename = f"{st.session_state.topic}_Lesetext.docx"
  lesetext_bio = create_document_for_genius_ai(st.session_state.response)

  fragen_filename = f"{st.session_state.topic}_Fragen.docx"
  fragen_bio = create_document_for_genius_ai(st.session_state.fragen)

  l√∂sungen_filename = f"{st.session_state.topic}_L√∂sungen.docx"
  l√∂sungen_bio = create_document_for_genius_ai(st.session_state.l√∂sungen)


  combined_bio = create_combined__exercise_document(
    st.session_state.response,
    st.session_state.fragen,
    st.session_state.l√∂sungen
  )

  with st.expander("Einzelne Dokumente"):
    st.write("Hier kannst du die Dokumente einzeln herunterladen:")
    one, two, three = st.columns(3)

    one.download_button(
        use_container_width=True,
        label="Lesetext :material/download:",
        data=lesetext_bio.getvalue(),
        file_name=lesetext_filename,
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

    two.download_button(
        use_container_width=True,
        label="Fragen :material/download:",
        data=fragen_bio.getvalue(),
        file_name=fragen_filename,
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

    three.download_button(
        use_container_width=True,
        label="L√∂sungen :material/download:",
        data=l√∂sungen_bio.getvalue(),
        file_name=l√∂sungen_filename,
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

  left, right = st.columns(2, gap="large")

  with left:
    if st.download_button(
        label="Gesamtes Dokument herunterladen :material/download:",
        data=combined_bio.getvalue(),
        file_name=f"{st.session_state.topic}_Alle_Unterlagen.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        use_container_width=True
    ):
      show_download_popup("Dokument")

  with right:
    if st.button(label="Neu starten :material/restart_alt:", use_container_width=True):
      show_restart_popup()
      reset_apps()
      st.rerun()

  # if st.button("Ok"):
  #   st.rerun()